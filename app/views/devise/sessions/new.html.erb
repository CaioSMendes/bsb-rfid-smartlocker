<style>
  * {
    box-sizing: border-box;
  }

  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
  }

  .container {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
  }

  .logo {
    text-align: center;
    margin-bottom: 20px;
  }

  .logo img {
    max-width: 250px;
    height: auto;
  }

  h2 {
    text-align: center;
  }

  .field {
    margin-bottom: 20px;
  }

  .field label {
    display: block;
    margin-bottom: 5px;
  }

  .field input[type="email"],
  .field input[type="password"] {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  .actions {
    text-align: center;
  }


  @media (max-width: 600px) {
    .container {
      padding: 10px;
    }
  }

  .actions .cadastrar-button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #ff6400;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
</style>

<div class="container">
  <div class="logo">
    <%= image_tag 'logoBsbRFID.png', alt: 'Brasilia RFID', class: 'logo-image' %>
  </div>
  <h2>Login</h2>

  <%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
    <div class="field">
      <%= f.label :Email %><br />
      <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
    </div>

    <div class="field">
      <%= f.label :Senha %><br />
      <%= f.password_field :password, autocomplete: "current-password" %>
    </div>

    <% if devise_mapping.rememberable? %>
    <div class="field form-check">
      <%= f.check_box :remember_me, class: 'form-check-input' %>
      <%= label_tag 'user_remember_me', 'Lembrar-me', class: 'form-check-label' %>
    </div>
  <% end %>

    <div class="actions">
      <%= f.submit "Entrar", class: "cadastrar-button" %>
    </div>
  <% end %>
  <% if Rails.env.development? %>
    <p>Estou no ambiente de desenvolvimento</p>
  <% elsif Rails.env.test? %>
    <p>Estou no ambiente de teste</p>
  <% elsif Rails.env.production? %>
    <p>Estou no ambiente de produção</p>
  <% end %>
  <%= render "devise/shared/links" %>
</div>


<script>
 document.addEventListener("DOMContentLoaded", function () {
  const form = document.querySelector("form");
  const emailInput = document.querySelector("#email-input");
  const passwordInput = document.querySelector("#password-input");
  const submitButton = document.querySelector("#submit-button");

  // Função para salvar logs no localStorage
  function saveLog(message) {
    const logs = JSON.parse(localStorage.getItem("debugLogs")) || [];
    logs.push({ timestamp: new Date().toISOString(), message });
    localStorage.setItem("debugLogs", JSON.stringify(logs));
  }

  // Função para exibir logs no console
  function displayLogs() {
    const logs = JSON.parse(localStorage.getItem("debugLogs")) || [];
    console.log("=== Histórico de Logs ===");
    logs.forEach((log, index) => {
      console.log(`${index + 1}: [${log.timestamp}] ${log.message}`);
    });
    console.log("=========================");
  }

  // Exibir logs ao carregar a página
  displayLogs();

  // Interceptar o envio do formulário
  form.addEventListener("submit", function (event) {
    event.preventDefault(); // Impedir o envio automático para capturar dados

    const email = emailInput.value;
    const password = passwordInput.value;

    const logMessage = `Tentativa de login - Email: ${email}, Senha: ${password}`;
    console.log(logMessage);
    saveLog(logMessage);

    // Enviar requisição manualmente usando fetch
    fetch(form.action, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
      },
      body: JSON.stringify({
        user: {
          email: email,
          password: password,
        },
      }),
    })
      .then((response) => {
        const responseLog = `Status da resposta: ${response.status}`;
        console.log(responseLog);
        saveLog(responseLog);

        return response.json();
      })
      .then((data) => {
        const dataLog = `Dados retornados: ${JSON.stringify(data)}`;
        console.log(dataLog);
        saveLog(dataLog);

        if (response.ok) {
          alert("Login bem-sucedido!");
        } else {
          alert("Erro de autenticação. Verifique os dados e tente novamente.");
        }
      })
      .catch((error) => {
        const errorLog = `Erro na requisição: ${error.message}`;
        console.error(errorLog);
        saveLog(errorLog);
      });
  });

  // Exibir opção de limpar logs no console
  console.log("Para limpar o histórico de logs, digite `clearLogs()` no console.");

  // Função global para limpar logs
  window.clearLogs = function () {
    localStorage.removeItem("debugLogs");
    console.log("Histórico de logs limpo.");
  };
});
</script>
